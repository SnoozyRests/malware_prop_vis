#!/usr/bin/env python
import json
import datetime
from subprocess import Popen, run, PIPE

from flask import Flask, render_template, request

app = Flask(__name__)

@app.route("/")
def index():
    return render_template('index.html')

@app.route("/listVMs")
def listVMs():
	output = {}
	output['entry'] = run(['vboxmanage list vms'], shell=True, stdout=PIPE)
	output['entry'] = str(output['entry'])
	output['vms'] = output['entry'].split("stdout=b'")[1]
	output['vms'] = output['vms'].split("\\n")
	return json.dumps(output)

@app.route("/showVMdetail")
def showVMdetail():
	vm = request.args.get('vm_name')
	print (vm)
	output = {}
	output['entry'] = run(['vboxmanage showvminfo ' + vm + ' --machinereadable'], shell=True, stdout=PIPE)
	output['entry'] = str(output['entry'])
	output['entry'] = output['entry'].split("\\n")
	return json.dumps(output)

@app.route("/launchVM")
def launchVM():
	vm = request.args.get('vm_name')
	print (vm)

	output = {}
	stream = run(['vboxmanage startvm ' + vm], shell=True, stdout=PIPE)
	return json.dumps(output)

@app.route("/enableMetrics")
def enableMetrics():
	output = {}
	stream = run(['vboxmanage metrics setup'], shell=True, stdout=PIPE)
	stream = run(['vboxmanage metrics enable'], shell=True, stdout=PIPE)
	return json.dumps(output)

@app.route("/queryMetrics")
def queryMetrics():
	output = {}
	output['entry'] = run(['vboxmanage metrics query'], shell=True, stdout=PIPE)
	output['entry'] = str(output['entry'])
	output['entry'] = ' '.join(output['entry'].split())
	output['entry'] = output['entry'].split("\\n")

	output['dt'] = str(datetime.datetime.now())
	output['metrics'] = {}

	for i in range(4,len(output['entry'])):
		sss = output['entry'][i].split()
		#print (i, ": ", sss)
		if len(sss) > 1:
			if sss[0] not in output['metrics']:
				output['metrics'][sss[0]] = []
			if len(sss) == 3:
				output['metrics'][sss[0]].append([sss[1], sss[2]])
			else:
				output['metrics'][sss[0]].append([sss[1], 'NA'])
	#print (output['metrics'])
	return json.dumps(output)

if __name__ == "__main__":
    #socketio.run(app, host='0.0.0.0',port=9123,debug=True)
    app.run(host='0.0.0.0',port=7234,debug=True)
