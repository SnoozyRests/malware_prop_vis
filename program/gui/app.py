#!/usr/bin/env python
import json
import datetime
import csv
import shutil
import os
from subprocess import Popen, run, PIPE
from flask import Flask, render_template, request
from datetime import datetime

app = Flask(__name__)

metrics = ["cpu_user", "cpu_kernel", "ram_used", "disk_IO", "network_IN", "network_OUT"]
fields = ['Date', 'Machine', 'Metric', 'Unit']

@app.route("/")
def index():
    return render_template('index.html')

@app.route("/listVMs")
def listVMs():
	output = {}
	output['entry'] = run(['vboxmanage list vms'], shell=True, stdout=PIPE)
	output['entry'] = str(output['entry'])
	output['vms'] = output['entry'].split("stdout=b'")[1]
	output['vms'] = output['vms'].split("\\n")
	return json.dumps(output)

@app.route("/showVMdetail")
def showVMdetail():
	vm = request.args.get('vm_name')
	print (vm)
	output = {}
	output['entry'] = run(['vboxmanage showvminfo ' + vm + ' --machinereadable'], shell=True, stdout=PIPE)
	output['entry'] = str(output['entry'])
	output['entry'] = output['entry'].split("\\n")
	return json.dumps(output)

@app.route("/launchVM")
def launchVM():
	vm = request.args.get('vm_name')
	print (vm)

	output = {}
	stream = run(['vboxmanage startvm ' + vm], shell=True, stdout=PIPE)
	return json.dumps(output)

@app.route("/enableMetrics")
def enableMetrics():
    #run('mv ./data/*.csv ./data_old/')
    files = os.listdir("./data")
    for file in files:
        shutil.move(f"./data/{file}", "./data_old")
    print(files)
    dt = datetime.now()
    dt_string = dt.strftime("%d-%m-%Y-%H:%M:%S")
    for i in range(len(metrics)):
        metrics[i] = metrics[i] + dt_string + ".csv"
        with open("data/" + metrics[i], "w") as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(fields)
    #print(metrics)
    vm = request.args.get('vm_name')
    print(vm)
    output = {}
    stream = run(['vboxmanage metrics setup'], shell=True, stdout=PIPE)
    #stream = run(['vboxmanage metrics enable --list'], shell=True, stdout=PIPE)
    return json.dumps(output)

@app.route("/queryMetrics")
def queryMetrics():
    vm = request.args.get('vm_name')
    print(vm)
    output = {}
    #print(run(['vboxmanage metrics query'], shell=True, stdout=PIPE))
    output['entry'] = run(['vboxmanage metrics query'], shell=True, stdout=PIPE)
    output['entry'] = str(output['entry'])
    output['entry'] = ' '.join(output['entry'].split())
    output['entry'] = output['entry'].split("\\n")
    #print(output['entry'])
    output['dt'] = str(datetime.datetime.now())
    output['metrics'] = {}

    for i in range(4,len(output['entry'])):
        sss = output['entry'][i].split()
        #print (sss)
        if len(sss) > 1:
            if sss[0] not in output['metrics']:
                output['metrics'][sss[0]] = []
            if len(sss) == 3:
                output['metrics'][sss[0]].append([sss[1], sss[2]])
            if len(sss) == 4:
                output['metrics'][sss[0]].append([sss[1], sss[2], sss[3]])
                #print (sss[0], sss[1], sss[2])
			##else:
				##output['metrics'][sss[0]].append([sss[1], 'NA'])
    #print (output['metrics'])
    return json.dumps(output)

if __name__ == "__main__":
    #socketio.run(app, host='0.0.0.0',port=9123,debug=True)
    app.run(host='0.0.0.0',port=7234,debug=True)
